---
description: 
globs: 
alwaysApply: true
---
# 测试文件组织规则

> 此规则定义了项目中测试文件的组织方式和命名规范

## 基本原则

1. 所有测试文件必须放置在 `tests/` 目录下
2. 测试文件应与被测试的代码模块保持相同的目录结构关系
3. 测试文件名应当清晰反映其测试的组件和功能

## 目录结构

测试文件应当以被测试模块的功能域名分组，例如：

```
tests/
  ├── core/          # 测试src/core/目录下的核心模块
  ├── api/           # 测试src/api/目录下的API模块
  ├── utils/         # 测试utils/目录下的工具模块
  ├── video/         # 测试视频处理相关功能
  ├── config/        # 测试配置相关功能
  └── integration/   # 整合测试
```

## 命名规范

1. **单元测试文件**：使用 `test_` 前缀，后接被测试模块的名称，如 `test_video_repair_tools.py`
2. **测试套件**：使用描述性名称，例如 `test_video_generation_pipeline.py`
3. **测试函数**：使用 `test_` 前缀加上被测试的功能名称，如 `test_video_validation()`

## 测试文件结构

每个测试文件应包含：

1. 清晰的文件顶部注释，说明测试目的
2. 必要的导入和测试环境设置
3. 按功能分组的测试函数
4. 主函数入口点(如果需要独立运行)

## 示例

```python
#!/usr/bin/env python3
"""
测试视频修复工具功能

验证视频文件的检测、修复和安全加载功能是否正常工作
"""

import os
import sys
import logging
from src.core.magic_video_fix import video_fix_tools

# 配置日志
logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_video_validation():
    """测试视频验证功能"""
    # 测试代码...

def test_safe_video_loading():
    """测试安全视频加载功能"""
    # 测试代码...

if __name__ == "__main__":
    # 运行测试
    test_video_validation()
    test_safe_video_loading()
```

## 现有实例

- [测试视频修复工具](mdc:tests/video/test_video_repair_tools.py)：验证视频文件的检测、修复和安全加载功能
- [测试视频生成流水线](mdc:tests/video/test_video_generation_pipeline.py)：测试从视频分析到最终合成的整个流程

## 注意事项

1. 每次创建新功能时，应同步创建对应的测试文件
2. 测试文件命名应反映被测试功能的实际用途，而非简单地复制被测试文件名称
3. 确保测试覆盖率全面，包括正常路径和异常路径
4. 测试文件应能独立运行，同时也能通过测试框架（如pytest）批量执行
