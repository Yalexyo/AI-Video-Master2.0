---
description: 
globs: 
alwaysApply: true
---
## Debug Iteration Strategy

> 当出现**重复且难以定位的 Bug**（例如"点击 **开始维度分析** 时持续报错"）时，务必遵循以下迭代式排查流程，以便快速定位根因并留下可复用的调试记录。

1. **复现与日志收集**  
   • 首先使用 `run_terminal_cmd` 查看最新日志：  
   `tail -n 50 logs/app_$(date +%Y%m%d).log | cat`  
   • 若日志不足以定位，再结合 `grep_search`、`read_file` 精准查源。

2. **假设 → 实验 → 记录**  
   • 基于日志生成 _多条可能根因假设_，按最可能→最不可能排序。  
   • **一次只验证一个假设**：最小改动后立即运行 `scripts/run.sh` 复测。  
   • 每次实验必须写入 `docs/debug_history.md`：时间戳 / 假设 / 采取的代码改动 / 结果（成功或失败）。
   • **记录结果时必须用emoji标识**：
     - 使用✅开头标识已解决的问题（如：`- **结果**: ✅ 问题已解决`）
     - 使用❌开头标识未解决的问题（如：`- **结果**: ❌ 修改无效`）
     - 使用🤔️开头标识待解决的问题（如：`- **结果**: 🤔️ 需要进一步测试`）
     - 除结果标识外，其他地方不要使用emoji

3. **不可行方案收敛**  
   • 当改动无效时，立刻回滚，标记该路径为❌，避免后续重复尝试。  
   • 继续下一条假设，重复 _假设→实验→记录_。

4. **找到可行方案后优化**  
   • 若修复成功但实现较粗糙，继续最小化代码、增加注释与测试。  
   • 更新 `docs/debug_history.md` 记录 _最终最优解_。

5. **总结与自动化**  
   • 将关键教训抽象为单位测试或静态检查，防止回归。  
   • 若具有普适性，升级为新的规则（例如本规则）。

6. **修复记录与分享**  
   • 根据时间投入和复杂度，修复可分为以下级别：
     - **常规修复**（0.5-1小时）：简化记录，重点记录问题和解决方案
     - **中等复杂度修复**（1-2小时）：标准记录，包含尝试过程和简要经验
     - **重大修复**（2小时以上）：详细记录，全面背景、方案对比和教训
   
   • 判断重要修复的其他标准：
     - 代码影响范围（多个模块/文件，100行以上改动）
     - 问题严重程度（核心功能阻断，数据安全问题）
     - 解决方案复杂度（需深入理解底层原理）
     - 小修复积累（同一问题超过3次小修复）
   
   • 重要修复记录格式建议：
     ```
     ## [问题关键词] 核心问题简述 (YYYY-MM-DD解决)
     
     ### 1. 问题背景
     - 最初发现时间、场景
     - 问题表现及影响范围
     - 相关错误日志或用户反馈
     
     ### 2. 尝试方案历史
     - 按时间顺序列出所有尝试（包括失败方案）
     - 每个方案的假设依据和验证结果
     - 技术选型考量和权衡分析
     
     ### 3. 最终解决方案
     - 完整技术实现描述
     - 核心代码示例或修改点
     - 解决原理和为何有效
     
     ### 4. 经验教训与预防措施
     - 从问题中学到的关键教训
     - 未来预防类似问题的建议
     - 新增的测试或监控点
     
     ### 5. 关键词标签
     #相关技术 #问题类型 #组件名称
     ```

7. **待验证项追踪与自动更新**
   • 所有标记为 🤔️ 的待验证项必须在调试记录文档前部的"待验证清单"中列出：
     ```
     ## 待验证清单
     1. [YYYY-MM-DD] 待验证：[简短描述] - [链接到具体章节]
     ```
   • 待验证项应当包含截止日期，便于安排后续验证工作
   • 使用以下方式追踪和自动更新待验证项：
     1. **track_pending.py 脚本**：项目中提供 `scripts/track_pending.py` 脚本，用于扫描并收集所有 🤔️ 标记项
     ```bash
     # 用法示例
     python scripts/track_pending.py  # 扫描并更新待验证清单
     python scripts/track_pending.py --auto-update  # 自动更新已完成但未修改标记的项
     ```
     2. **自动化集成**：推荐在CI流程或定时任务中集成此脚本，定期更新待验证清单
     3. **更新机制**：验证完成后，可以在 `#AUTO-UPDATE` 注释后标记实际结果
     ```
     - **结果**: 🤔️ 需要进一步测试 #AUTO-UPDATE: ✅ 已验证成功
     ```
     下次运行 `track_pending.py --auto-update` 时，将自动将 🤔️ 更新为 ✅

### 文件约定
- 调试记录统一写入 `[debug_history.md](mdc:docs/debug_history.md)`，若文件不存在请自动创建。  
- 回滚/重试时务必先 `git add` ➜ `git commit` 记录历史，再进行下一次尝试。
- **自觉启动记录机制**：在发现符合记录条件的问题时，无需等待指令，应主动创建记录并持续更新调试过程。

---

**遵循该策略，可系统化地搜寻根因，避免盲目修改与信息丢失。**
